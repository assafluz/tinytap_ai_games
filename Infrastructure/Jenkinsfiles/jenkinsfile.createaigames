pipeline {
    agent any

    environment {
        // Define environment variables
        GIT_USER = 'assafluz'
        GIT_EMAIL = 'assaf@tinytap.com'
        // Securely retrieve the GitHub token
        GITHUB_TOKEN = credentials('git_token')
        // Repository URL
        REPO_URL = 'https://github.com/assafluz/tinytap_ai_games.git'
        // Branch to work with
        BRANCH_NAME = 'main'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Check Python version and prepare the environment
                    sh 'python3 --version'
                    echo 'Setting up environment...'
                    // Add any additional environment setup steps here
                }
            }
        }

        stage('Run Tests') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    // Run tests and handle any failures
                    sh 'python3 -m pytest test_ai_creator/create_ai_game.py::TestCreateAiGame::test_create_ai_game'
                }
            }
        }

        stage('Git Operations') {
            steps {
                script {
                    // Stash changes and configure Git
                    sh "git stash"
                    sh "git config user.name '${GIT_USER}'"
                    sh "git config user.email '${GIT_EMAIL}'"

                    // Checkout and update the branch
                    sh "git checkout ${BRANCH_NAME}"
                    sh "git pull --rebase origin ${BRANCH_NAME}"
                }
            }
        }

        stage('Update Content') {
            steps {
                script {
                    // Perform operations to update content, e.g., updating index.html
                    echo 'Updating content...'
                    // Add steps for content update here
                }
            }
        }

        stage('Commit and Push') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    // Commit and push changes
                    sh "git add index.html"
                    sh "git commit -m 'Update index.html from Jenkins'"
                    withCredentials([string(credentialsId: 'git_token', variable: 'GITHUB_TOKEN')]) {
                        sh "git push https://${GIT_USER}:${GITHUB_TOKEN}@${REPO_URL.substring(8)} ${BRANCH_NAME}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution has completed.'
            // Include any post-execution steps here, like cleanup or notifications
        }
    }
}
