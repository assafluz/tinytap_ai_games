pipeline {
    agent any

    environment {
        GIT_USER = 'assafluz'
        GIT_EMAIL = 'assaf@tinytap.com'
        GITHUB_TOKEN = credentials('git_token')
        REPO_URL = 'https://github.com/assafluz/tinytap_ai_games.git'
        BRANCH_NAME = 'main'
    }

    stages {
        stage('TinyTap production create ai games') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '/Library/Frameworks/Python.framework/Versions/3.9/bin/python3 -m pytest test_ai_creator/create_ai_game.py::TestCreateAiGame::test_create_ai_game'
                }
            }
        }

        stage('Stash Uncommitted Changes') {
            steps {
                script {
                    try {
                        sh "git stash"
                    } catch (Exception e) {
                        // No changes to stash, ignore the exception
                    }
                }
            }
        }

        stage('Rebase with origin/main') {
            steps {
                script {
                    sh "git checkout ${BRANCH_NAME}"
                    sh "git pull --rebase origin ${BRANCH_NAME}"
                }
            }
        }

        stage('Push index.html to Git') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    // Set Git User Info
                    sh "git config user.name ${GIT_USER}"
                    sh "git config user.email ${GIT_EMAIL}"

                    // Remove untracked files
                    sh "rm -rf test_ai_creator/__pycache__"

                    // Add and commit changes, but only if there are changes to commit
                    sh "git add index.html"
                    def commit_output = sh(script: "git diff --cached --exit-code --quiet || git commit -m 'Update index.html from Jenkins'", returnStatus: true)
                    if (commit_output != 0) {
                        // Ensure we have the correct remote URL
                        sh "git remote set-url origin ${REPO_URL}"

                        // Push using token for authentication
                        withCredentials([string(credentialsId: 'git_token', variable: 'GITHUB_TOKEN')]) {
                            sh """git push https://${GIT_USER}:${GITHUB_TOKEN}@${REPO_URL.split('https://')[1]} ${BRANCH_NAME}:${BRANCH_NAME}"""
                        }
                    }
                }
            }
        }
    }
}
